Step-by-Step Guide: Creating a Docker Image and Using Named Volumes
Step 1: Write a Dockerfile
A Dockerfile is a script that defines how to build your Docker image.

Create a Dockerfile in your project directory: In your project folder, create a file named Dockerfile (no extension).

Add the following content to the Dockerfile:

Use a base image:
FROM python:3.9-slim
Set the working directory inside the container:
WORKDIR /app
Copy the application files into the container:
COPY . .
Install dependencies (if any):
RUN pip install -r requirements.txt
Set environment variables if needed:
ENV ENVIRONMENT=production
Specify the command to run your app:
CMD ["python", "your_app.py"]
Replace your_app.py with your appâ€™s main script.

If you have a requirements.txt, this will install the dependencies.

Step 2: Build the Docker Image
Now, you will use the Dockerfile to create a Docker image.

Open your terminal and navigate to the folder where the Dockerfile is located.

Run the following command to build the Docker image:

docker build -t my_app_image .
my_app_image is the name you are giving to your image. You can change it to any name you prefer.

The . refers to the current directory, where the Dockerfile is located.

Step 3: Create Named Volumes for Logs and User Data
Docker volumes are used to store data outside the container and make it persistent even if the container is removed.

Create two named volumes:
One for logs and one for user data.

docker volume create logs_volume

docker volume create data_volume

Step 4: Run a Container with Named Volumes Attached
You can now run a container from your image and attach the named volumes.

Run the following command to start the container with volumes attached:

docker run -d --name my_app_container -v logs_volume:/app/logs -v data_volume:/app/data my_app_image
Step 5: Verify Volumes are Attached and Working
To confirm the volumes are correctly mounted and working, follow these steps:

Check the contents of the logs and data volumes:

docker exec my_app_container ls /app/logs
docker exec my_app_container ls /app/data
Step 6: Interact with Volumes (Optional)
If you want to inspect the data in the volumes or copy files from them, you can use the following methods.

To view data in the logs_volume volume:

docker run --rm -v logs_volume:/mnt busybox ls /mnt
To copy files from the container to the host:

docker cp my_app_container:/app/logs /path/to/host/destination
Step 7: Clean Up (Optional)
If you want to remove the container and volumes once you're done:

Stop and remove the container:

docker stop my_app_container
docker rm my_app_container
Remove the volumes (if no longer needed):

docker volume rm logs_volume data_volume
Summary of Commands:
Build Image:

docker build -t my_app_image .
Create Volumes:

docker volume create logs_volume
docker volume create data_volume
Run Container with Volumes:

docker run -d --name my_app_container -v logs_volume:/app/logs -v data_volume:/app/data my_app_image
Verify Volumes:

docker exec my_app_container ls /app/logs
docker exec my_app_container ls /app/data
View Volume Data (Optional):

docker run --rm -v logs_volume:/mnt busybox ls /mnt
Copy Files (Optional):

docker cp my_app_container:/app/logs /path/to/host/destination
Clean Up:

docker stop my_app_container
docker rm my_app_container
docker volume rm logs_volume data_volumedocker 
